class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        long long maxi = 0, sum = 0;
        int i = 0, j = 0;
        map<int, int> mp;
        while(j < nums.size()) {
            mp[nums[j]]++;
            sum += nums[j];
            if((j-i+1) < k) j++;    // our window size is small, inc j
            else if((j-i+1) == k) {    // we have arrays of our window size, find maxi
                if(mp.size() == k) maxi = max(maxi, sum);
                mp[nums[i]]--;    // move window by removing calc of i
                sum -= nums[i];    // remove calc of i from sum as well
                if(mp[nums[i]] == 0) mp.erase(nums[i]);   // earse it from map
                i++, j++;
            } 
        }
        return maxi;
    }
};
